/*
 * File: app/view/baseForm.js
 * Date: Thu Nov 10 2011 15:23:43 GMT-0500 (Eastern Standard Time)
 *
 * This file was generated by Ext Designer version 1.2.2.
 * http://www.sencha.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

function screen() {
	this.leftLeft = 0;
	this.leftCenter = 0;
	this.leftRight = 0;
	this.centerLeft = 0;
	this.centerCenter = 0;
	this.centerRight = 0;
	this.startPixelOutput = 0;
	this.endPixelOutput = 0;
	this.startPixelOverlap = 0;
	this.endPixelOverlap = 0;
}

function WSC() {
	/// Properties
	this.hsize = 0;
	this.vsize = 0;
	this.vhff = 0;
	this.HNatPixRate = 0;
	this.VNatPixRate = 0;
	this.numprojectors = 0;
	this.sizePerStack = 0;
	this.lens = 0;
	this.distance = 0;
	this.spyOverlap = 0;
	this.spyOpMonH = 0;
	this.spyOpMonV = 0;
	/// Methods
	this.getScreens = function() {
		var screens = [];
		var x = 0, p = 0, o = 0;
		// x = left calculations, c = center calculations
		var c = (this.hsize / 2) - this.hsize;
		for ( i = 0; i < this.numprojectors; i++) {
			var scrn = new screen();
			// left calcs
			scrn.leftLeft = x;
			scrn.leftCenter = this.getScreenWidth() / 2 + x;
			scrn.leftRight = this.getScreenWidth() + x;
			x = scrn.leftRight;

			// center calcs
			scrn.centerLeft = c;
			scrn.centerCenter = this.getScreenWidth() / 2 + c;
			scrn.centerRight = this.getScreenWidth() + c;
			c = scrn.centerRight;

			// pixel output calcs
			scrn.startPixelOutput = p;
			scrn.endPixelOutput = p + this.HNatPixRate;
			p = scrn.endPixelOutput;

			// pixel overlap calcs
			scrn.startPixelOverlap = this.HNatPixRate - this.getOverLapPix() + o;
			scrn.endPixelOverlap = scrn.startPixelOverlap + this.getOverLapPix();
			o = scrn.startPixelOverlap;

			screens.push(scrn);
		}
		return screens;
	};

	this.getCenterHeightFF = function() {
		return (this.vsize / 2) + this.vhff;

	};

	this.getPixPerInch = function() {
		return this.RoundNum(this.getSpyHNatPixRate() / (this.hsize * 12));
	};

	this.getAspectRatio = function() {
		return this.RoundNum((this.hsize / this.vsize), 3);
	};

	this.getProjAspectRatio = function() {
		return this.RoundNum(this.HNatPixRate / this.VNatPixRate, 3);
	};

	this.getStackWidth = function() {
		return this.RoundNum((this.vsize * this.getProjAspectRatio()), 2);
	};

	this.RoundNum = function(num, x) {
		if (x === null)
			x = 3;
		var num1 = Math.round(num * Math.pow(10, x));
		var num2 = Math.pow(10, x);
		return num1 / num2;
	};

	this.getSpyHNatPixRate = function() {
		return this.RoundNum(this.VNatPixRate * this.getAspectRatio(), 0);
	};

	this.getSpyVNatPixRate = function() {
		return this.VNatPixRate;
	};

	this.getSpyAspectRatio = function() {
		return this.getSpyHNatPixRate() / this.getSpyVNatPixRate();
	};

	this.getSpyScreenTotalPix = function() {
		return this.getSpyVNatPixRate() * this.getSpyHNatPixRate();
	};

	this.getSpyOpMonTotalPix = function() {
		return this.spyOpMonH * this.getSpyVNatPixRate();
	};

	this.getSpyTotalPix = function() {
		return this.getSpyScreenTotalPix() + this.getSpyOpMonTotalPix();
	};

	this.getScreenWidth = function() {
		var ret = this.vsize * (this.HNatPixRate / this.VNatPixRate);
		return ret;
	};
	// J87=	((D16*D19)-D23)/(D19-1))
	// D16 = HNatPixRate
	// D19 = numprojectors
	// D23 = spyHNatPixRate
	this.getOverLapPix = function() {
		var ret = ((this.HNatPixRate * this.numprojectors) - this.getSpyHNatPixRate()) / (this.numprojectors - 1);
		return ret;
	};

	this.getOverlapSize = function() {
		return (this.getScreenWidth() * (this.getOverLapPix() / this.HNatPixRate));
	};
}
